-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hardware_accelerator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IN_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    IN_r_TVALID : IN STD_LOGIC;
    IN_r_TREADY : OUT STD_LOGIC;
    IN_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    IN_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUT_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_r_TVALID : OUT STD_LOGIC;
    OUT_r_TREADY : IN STD_LOGIC;
    OUT_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUT_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of hardware_accelerator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hardware_accelerator,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.905000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=28,HLS_SYN_LUT=141,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IN_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln21_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_TDATA_blk_n : STD_LOGIC;
    signal trunc_ln21_fu_118_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln21_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_OUT_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_predicate_op52_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal i_fu_128_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_330 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_107 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal value_V_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal val1_V_fu_148_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val2_V_fu_158_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_186_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_1_fu_182_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal val3_V_fu_168_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val4_V_fu_178_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_2_fu_202_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_1_fu_206_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_1_fu_210_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_fu_216_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_196_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1353_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_230_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_240_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_250_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_272_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1371_fu_226_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_282_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1356_fu_290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1356_fu_302_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_IN_data_V_U_apdone_blk : STD_LOGIC;
    signal IN_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_r_TVALID_int : STD_LOGIC;
    signal IN_r_TREADY_int : STD_LOGIC;
    signal regslice_both_IN_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_keep_V_U_apdone_blk : STD_LOGIC;
    signal IN_r_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_IN_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_IN_last_V_U_apdone_blk : STD_LOGIC;
    signal IN_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_IN_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_IN_last_V_U_ack_in : STD_LOGIC;
    signal OUT_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_r_TVALID_int : STD_LOGIC;
    signal OUT_r_TREADY_int : STD_LOGIC;
    signal regslice_both_OUT_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUT_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUT_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUT_last_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_IN_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_r_TDATA,
        vld_in => IN_r_TVALID,
        ack_in => regslice_both_IN_data_V_U_ack_in,
        data_out => IN_r_TDATA_int,
        vld_out => IN_r_TVALID_int,
        ack_out => IN_r_TREADY_int,
        apdone_blk => regslice_both_IN_data_V_U_apdone_blk);

    regslice_both_IN_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_r_TKEEP,
        vld_in => IN_r_TVALID,
        ack_in => regslice_both_IN_keep_V_U_ack_in,
        data_out => IN_r_TKEEP_int,
        vld_out => regslice_both_IN_keep_V_U_vld_out,
        ack_out => IN_r_TREADY_int,
        apdone_blk => regslice_both_IN_keep_V_U_apdone_blk);

    regslice_both_IN_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_r_TLAST,
        vld_in => IN_r_TVALID,
        ack_in => regslice_both_IN_last_V_U_ack_in,
        data_out => IN_r_TLAST_int,
        vld_out => regslice_both_IN_last_V_U_vld_out,
        ack_out => IN_r_TREADY_int,
        apdone_blk => regslice_both_IN_last_V_U_apdone_blk);

    regslice_both_OUT_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUT_r_TDATA_int,
        vld_in => OUT_r_TVALID_int,
        ack_in => OUT_r_TREADY_int,
        data_out => OUT_r_TDATA,
        vld_out => regslice_both_OUT_data_V_U_vld_out,
        ack_out => OUT_r_TREADY,
        apdone_blk => regslice_both_OUT_data_V_U_apdone_blk);

    regslice_both_OUT_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_r_TKEEP_int,
        vld_in => OUT_r_TVALID_int,
        ack_in => regslice_both_OUT_keep_V_U_ack_in_dummy,
        data_out => OUT_r_TKEEP,
        vld_out => regslice_both_OUT_keep_V_U_vld_out,
        ack_out => OUT_r_TREADY,
        apdone_blk => regslice_both_OUT_keep_V_U_apdone_blk);

    regslice_both_OUT_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IN_r_TLAST_int,
        vld_in => OUT_r_TVALID_int,
        ack_in => regslice_both_OUT_last_V_U_ack_in_dummy,
        data_out => OUT_r_TLAST,
        vld_out => regslice_both_OUT_last_V_U_vld_out,
        ack_out => OUT_r_TREADY,
        apdone_blk => regslice_both_OUT_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_107 <= i_reg_330;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_107 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_330 <= i_fu_128_p2;
                trunc_ln21_reg_323 <= trunc_ln21_fu_118_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)))) and (trunc_ln21_fu_118_p1 = ap_const_lv1_0) and (icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    value_V_fu_80(15 downto 0) <= ret_V_5_fu_260_p1(15 downto 0);
            end if;
        end if;
    end process;
    value_V_fu_80(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln21_fu_122_p2, ap_CS_fsm_state3, regslice_both_OUT_data_V_U_apdone_blk, ap_block_state2_io, ap_block_state3_io, IN_r_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)))) and (icmp_ln21_fu_122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)))) and (icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    IN_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln21_fu_122_p2, IN_r_TVALID_int)
    begin
        if (((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_r_TDATA_blk_n <= IN_r_TVALID_int;
        else 
            IN_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_TREADY_assign_proc : process(IN_r_TVALID, regslice_both_IN_data_V_U_ack_in)
    begin
        if (((regslice_both_IN_data_V_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = IN_r_TVALID))) then 
            IN_r_TREADY <= ap_const_logic_1;
        else 
            IN_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln21_fu_122_p2, regslice_both_OUT_data_V_U_apdone_blk, ap_block_state2_io, IN_r_TVALID_int)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)))) and (icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_r_TREADY_int <= ap_const_logic_1;
        else 
            IN_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln21_fu_122_p2, trunc_ln21_fu_118_p1, ap_CS_fsm_state3, trunc_ln21_reg_323, OUT_r_TREADY_int)
    begin
        if ((((trunc_ln21_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln21_fu_118_p1 = ap_const_lv1_1) and (icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            OUT_r_TDATA_blk_n <= OUT_r_TREADY_int;
        else 
            OUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUT_r_TDATA_int <= (trunc_ln1356_fu_290_p1 & or_ln1356_fu_302_p2);
    OUT_r_TVALID <= regslice_both_OUT_data_V_U_vld_out;

    OUT_r_TVALID_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln21_fu_122_p2, regslice_both_OUT_data_V_U_apdone_blk, ap_predicate_op52_write_state2, ap_block_state2_io, IN_r_TVALID_int)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)))) and (ap_predicate_op52_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_r_TVALID_int <= ap_const_logic_1;
        else 
            OUT_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1353_fu_190_p2 <= std_logic_vector(unsigned(val2_V_fu_158_p4) + unsigned(val1_V_fu_148_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(icmp_ln21_fu_122_p2, regslice_both_OUT_data_V_U_apdone_blk, IN_r_TVALID_int)
    begin
                ap_block_state2 <= ((regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)));
    end process;


    ap_block_state2_io_assign_proc : process(ap_predicate_op52_write_state2, OUT_r_TREADY_int)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = OUT_r_TREADY_int) and (ap_predicate_op52_write_state2 = ap_const_boolean_1));
    end process;


    ap_block_state3_io_assign_proc : process(trunc_ln21_reg_323, OUT_r_TREADY_int)
    begin
                ap_block_state3_io <= ((trunc_ln21_reg_323 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_r_TREADY_int));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln21_fu_122_p2, regslice_both_OUT_data_V_U_apdone_blk, ap_block_state2_io, IN_r_TVALID_int)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)))) and (icmp_ln21_fu_122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op52_write_state2_assign_proc : process(icmp_ln21_fu_122_p2, trunc_ln21_fu_118_p1)
    begin
                ap_predicate_op52_write_state2 <= ((trunc_ln21_fu_118_p1 = ap_const_lv1_1) and (icmp_ln21_fu_122_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln21_fu_122_p2, regslice_both_OUT_data_V_U_apdone_blk, ap_block_state2_io, IN_r_TVALID_int)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_OUT_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln21_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_TVALID_int)))) and (icmp_ln21_fu_122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_128_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_0_reg_107));
    icmp_ln21_fu_122_p2 <= "1" when (i_0_reg_107 = ap_const_lv4_8) else "0";
    lhs_V_1_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val1_V_fu_148_p4),9));
    lhs_V_2_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val3_V_fu_168_p4),9));
    or_ln1356_fu_302_p2 <= (tmp_3_fu_294_p3 or r_V_fu_282_p3);
    r_V_fu_282_p3 <= (tmp_4_fu_272_p4 & ap_const_lv8_0);
    ret_V_1_fu_210_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_202_p1) + unsigned(rhs_V_1_fu_206_p1));
    ret_V_3_fu_216_p4 <= ret_V_1_fu_210_p2(8 downto 1);
    ret_V_5_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_250_p4),32));
    ret_V_fu_196_p2 <= std_logic_vector(unsigned(rhs_V_fu_186_p1) + unsigned(lhs_V_1_fu_182_p1));
    rhs_V_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val4_V_fu_178_p1),9));
    rhs_V_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val2_V_fu_158_p4),9));
    tmp_1_fu_250_p4 <= ((tmp_fu_230_p4 & tmp_5_fu_240_p4) & ret_V_3_fu_216_p4);
    tmp_3_fu_294_p3 <= (ap_const_lv6_0 & zext_ln1371_fu_226_p1);
    tmp_4_fu_272_p4 <= ret_V_fu_196_p2(8 downto 1);
    tmp_5_fu_240_p4 <= add_ln1353_fu_190_p2(2 downto 1);
    tmp_fu_230_p4 <= ret_V_fu_196_p2(8 downto 3);
    trunc_ln1356_fu_290_p1 <= value_V_fu_80(16 - 1 downto 0);
    trunc_ln21_fu_118_p1 <= i_0_reg_107(1 - 1 downto 0);
    val1_V_fu_148_p4 <= IN_r_TDATA_int(31 downto 24);
    val2_V_fu_158_p4 <= IN_r_TDATA_int(23 downto 16);
    val3_V_fu_168_p4 <= IN_r_TDATA_int(15 downto 8);
    val4_V_fu_178_p1 <= IN_r_TDATA_int(8 - 1 downto 0);
    zext_ln1371_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_fu_216_p4),10));
end behav;
